#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodeproject:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3800');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


// socket.io 服务器端Socket
var io = require("socket.io").listen(server);
// const port = 3000;
// const hostname = "localhost"
var {stringify} = require("querystring");

var onLineUserCount = 0;
var onLineUser = {};
// 1. 监听 客户端的 socket 链接
io.on("connection", (socket) => {
    console.log(stringify(socket) + "上线了....");

    // 自动发送给客户端链接成功的消息

    socket.on("login", (nickname) => {

        console.log(nickname);
        socket.name = nickname;
        onLineUser[nickname] = socket;
        onLineUserCount++;
        socket.emit("loginSuccess");  // 只能发送给 自己
        console.log(onLineUserCount);
        io.sockets.emit("setOnLineCount", onLineUserCount); // sockets 发送所有在线用户
        io.sockets.emit("system", nickname);
    });

    // 2. 监听 客户端发来的消息
    socket.on("msgFromClient", msg => {
        io.sockets.emit("reveiceMsg", socket.name, msg); //把消息  转发到 客户端

    });

    // 3. 监听 客户端 关闭
    socket.on("disconnect", () => {
        onLineUserCount-- <= 0 ? onLineUserCount = 1 : onLineUserCount--;

        io.sockets.emit("setOnLineCount", onLineUserCount);
        // delete onLineUser[socket.name]
        socket.broadcast.emit('reveiceMsg', socket.name, "886,我下线了...");  //发送 除了 自己 以外的在线用户
    });

    // 4. 监听 客户端 error
    socket.on("error", (err) => {
        console.log(err);
        if (err) throw err;

    })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
